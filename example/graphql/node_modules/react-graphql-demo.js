var graphql = require('graphql').graphql;
var defaultSchema = require('myGQLSchema-es6').Schema;

module.exports = {

  servicesAllowed: {
    //'ewd-react-tools': true
  },

  handlers: {
    login: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        finished({error: 'You are already logged in'});
        return;
      }
      var username = messageObj.params.username;
      if (username === '') {
        finished({error: 'You must enter a username'});
        return;
      }
      var password = messageObj.params.password;
      if (password === '') {
        finished({error: 'You must enter a password'});
        return;
      }
      if (username !== 'rob') {
        finished({error: 'Invalid username'});
        return;
      }
      if (password !== 'secret') {
        finished({error: 'Invalid password'});
        return;
      }
      session.authenticated = true;
      session.data.$('username').value = username;
      finished({ok: true});
    },

    graphQLQuery: function(messageObj, session, send, finished) {
      if (session.authenticated) {
        var query = messageObj.params.query;
        var schema;
        if (messageObj.params.schema) {
          try {
            schema = require(messageObj.params.schema).Schema;
          }
          catch(err) {
            finished({
              error: 'Unable to load schema ' + messageObj.params.schema
            });
            return;
          }
        }
        else {
          schema = defaultSchema;
        }
        var context = {
          q: this, 
          session: session
        }
        graphql(schema, query, null, context).then(result => {
          console.log(result);
          finished({
            ok: true, 
            result: result
          });
        });
      }
    }

  },



  workerResponseHandlers: {
    // allow interception by master process to augment / process the request after authentication in worker
  }

};